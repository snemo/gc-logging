<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:black; }
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text x="600" y="24" text-anchor="middle" style="font-size:17px">Flame Graph</text>
<text x="10" y="277" id="details"> </text>
<text x="10" y="24" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer">Reset Zoom</text>
<text x="1090" y="24" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer">Search</text>
<text x="1090" y="277" id="matched"> </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (12,643 samples, 100.00%)</title><rect x="10.0" y="243.0" width="1180.0" height="15" fill="#c83232" rx="2" ry="2"/>
<text x="13.0" y="254.0">all</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (292 samples, 2.31%)</title><rect x="10.2" y="227.0" width="27.2" height="15" fill="#b6b634" rx="2" ry="2"/>
<text x="13.2" y="238.0">O..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (272 samples, 2.15%)</title><rect x="11.8" y="211.0" width="25.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.8" y="222.0">T..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (265 samples, 2.10%)</title><rect x="12.4" y="195.0" width="24.8" height="15" fill="#c8c83b" rx="2" ry="2"/>
<text x="15.4" y="206.0">C..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>MemAllocator::allocate() const (256 samples, 2.02%)</title><rect x="12.5" y="179.0" width="23.9" height="15" fill="#cccc3c" rx="2" ry="2"/>
<text x="15.5" y="190.0">M..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (209 samples, 1.65%)</title><rect x="14.0" y="163.0" width="19.5" height="15" fill="#bbbb36" rx="2" ry="2"/>
<text x="17.0" y="174.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (207 samples, 1.64%)</title><rect x="14.2" y="147.0" width="19.3" height="15" fill="#b1b132" rx="2" ry="2"/>
<text x="17.2" y="158.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (150 samples, 1.19%)</title><rect x="15.4" y="131.0" width="14.0" height="15" fill="#d4d43f" rx="2" ry="2"/>
<text x="18.4" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (133 samples, 1.05%)</title><rect x="16.5" y="115.0" width="12.4" height="15" fill="#d4d43f" rx="2" ry="2"/>
<text x="19.5" y="126.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (18 samples, 0.14%)</title><rect x="16.5" y="99.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.5" y="110.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (18 samples, 0.14%)</title><rect x="16.5" y="83.0" width="1.7" height="15" fill="#c4c439" rx="2" ry="2"/>
<text x="19.5" y="94.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Monitor::lock(Thread*) (90 samples, 0.71%)</title><rect x="18.8" y="99.0" width="8.4" height="15" fill="#cbcb3c" rx="2" ry="2"/>
<text x="21.8" y="110.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Monitor::ILock(Thread*) (88 samples, 0.70%)</title><rect x="18.8" y="83.0" width="8.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="21.8" y="94.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>os::PlatformEvent::park() (87 samples, 0.69%)</title><rect x="18.9" y="67.0" width="8.1" height="15" fill="#b0b032" rx="2" ry="2"/>
<text x="21.9" y="78.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__psynch_cvwait (84 samples, 0.66%)</title><rect x="19.0" y="51.0" width="7.8" height="15" fill="#ca3636" rx="2" ry="2"/>
<text x="22.0" y="62.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>MutatorAllocRegion::retire(bool) (17 samples, 0.13%)</title><rect x="27.2" y="99.0" width="1.6" height="15" fill="#cccc3c" rx="2" ry="2"/>
<text x="30.2" y="110.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (16 samples, 0.13%)</title><rect x="27.2" y="83.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="30.2" y="94.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (13 samples, 0.10%)</title><rect x="27.3" y="67.0" width="1.2" height="15" fill="#afaf32" rx="2" ry="2"/>
<text x="30.3" y="78.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1CollectionSet::add_young_region_common(HeapRegion*) (11 samples, 0.09%)</title><rect x="27.5" y="51.0" width="1.0" height="15" fill="#c4c439" rx="2" ry="2"/>
<text x="30.5" y="62.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (28 samples, 0.22%)</title><rect x="30.8" y="131.0" width="2.6" height="15" fill="#b2b233" rx="2" ry="2"/>
<text x="33.8" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ObjArrayAllocator::initialize(HeapWord*) const (28 samples, 0.22%)</title><rect x="33.5" y="163.0" width="2.6" height="15" fill="#c5c53a" rx="2" ry="2"/>
<text x="36.5" y="174.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/lang/Thread.run (12,138 samples, 96.01%)</title><rect x="37.5" y="227.0" width="1132.9" height="15" fill="#5bed5b" rx="2" ry="2"/>
<text x="40.5" y="238.0">java/lang/Thread.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (12,138 samples, 96.01%)</title><rect x="37.5" y="211.0" width="1132.9" height="15" fill="#55e855" rx="2" ry="2"/>
<text x="40.5" y="222.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (12,138 samples, 96.01%)</title><rect x="37.5" y="195.0" width="1132.9" height="15" fill="#69fb69" rx="2" ry="2"/>
<text x="40.5" y="206.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Application$$Lambda$1/5592464.run (12,138 samples, 96.01%)</title><rect x="37.5" y="179.0" width="1132.9" height="15" fill="#64f664" rx="2" ry="2"/>
<text x="40.5" y="190.0">Application$$Lambda$1/5592464.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Application.lambda$main$0 (12,138 samples, 96.01%)</title><rect x="37.5" y="163.0" width="1132.9" height="15" fill="#51e451" rx="2" ry="2"/>
<text x="40.5" y="174.0">Application.lambda$main$0</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SomeJob.run (12,138 samples, 96.01%)</title><rect x="37.5" y="147.0" width="1132.9" height="15" fill="#37cd37" rx="2" ry="2"/>
<text x="40.5" y="158.0">SomeJob.run</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SomeJob.itensiveOperation (12,136 samples, 95.99%)</title><rect x="37.5" y="131.0" width="1132.7" height="15" fill="#59eb59" rx="2" ry="2"/>
<text x="40.5" y="142.0">SomeJob.itensiveOperation</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ThreadSafepointState::handle_polling_page_exception() (257 samples, 2.03%)</title><rect x="422.2" y="115.0" width="24.0" height="15" fill="#c5c53a" rx="2" ry="2"/>
<text x="425.2" y="126.0">T..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SafepointSynchronize::block(JavaThread*) (254 samples, 2.01%)</title><rect x="422.2" y="99.0" width="23.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="425.2" y="110.0">S..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Monitor::lock_without_safepoint_check() (248 samples, 1.96%)</title><rect x="422.4" y="83.0" width="23.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="425.4" y="94.0">M..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Monitor::ILock(Thread*) (248 samples, 1.96%)</title><rect x="422.4" y="67.0" width="23.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="425.4" y="78.0">M..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>os::PlatformEvent::park() (248 samples, 1.96%)</title><rect x="422.4" y="51.0" width="23.2" height="15" fill="#bdbd37" rx="2" ry="2"/>
<text x="425.4" y="62.0">o..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__psynch_cvwait (242 samples, 1.91%)</title><rect x="422.4" y="35.0" width="22.6" height="15" fill="#ca3535" rx="2" ry="2"/>
<text x="425.4" y="46.0">_..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__cxx_global_var_init4 (26 samples, 0.21%)</title><rect x="446.2" y="115.0" width="2.5" height="15" fill="#f06c6c" rx="2" ry="2"/>
<text x="449.2" y="126.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>gettimeofday (76 samples, 0.60%)</title><rect x="448.8" y="115.0" width="7.0" height="15" fill="#da4c4c" rx="2" ry="2"/>
<text x="451.8" y="126.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>os::javaTimeMillis() (7,654 samples, 60.54%)</title><rect x="455.8" y="115.0" width="714.4" height="15" fill="#d1d13e" rx="2" ry="2"/>
<text x="458.8" y="126.0">os::javaTimeMillis()</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vsnprintf_chk (54 samples, 0.43%)</title><rect x="488.6" y="99.0" width="5.0" height="15" fill="#f16e6e" rx="2" ry="2"/>
<text x="491.6" y="110.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>gettimeofday (5,740 samples, 45.40%)</title><rect x="493.6" y="99.0" width="535.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="496.6" y="110.0">gettimeofday</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__check_rhosts_file (313 samples, 2.48%)</title><rect x="588.7" y="83.0" width="29.2" height="15" fill="#dc4f4f" rx="2" ry="2"/>
<text x="591.7" y="94.0">__..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>h_errno (28 samples, 0.22%)</title><rect x="617.9" y="83.0" width="2.6" height="15" fill="#d54545" rx="2" ry="2"/>
<text x="620.9" y="94.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rcmd_af.canonnamebuf (4,381 samples, 34.65%)</title><rect x="620.5" y="83.0" width="408.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="623.5" y="94.0">rcmd_af.canonnamebuf</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_res (1,387 samples, 10.97%)</title><rect x="898.8" y="67.0" width="129.5" height="15" fill="#ef6b6b" rx="2" ry="2"/>
<text x="901.8" y="78.0">_res</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>h_errno (12 samples, 0.09%)</title><rect x="1028.3" y="67.0" width="1.1" height="15" fill="#f16e6e" rx="2" ry="2"/>
<text x="1031.3" y="78.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>rcmd_af.canonnamebuf (1,509 samples, 11.94%)</title><rect x="1029.4" y="99.0" width="140.8" height="15" fill="#eb6666" rx="2" ry="2"/>
<text x="1032.4" y="110.0">rcmd_af.canonnamebuf</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>os::javaTimeMillis() (20 samples, 0.16%)</title><rect x="1170.6" y="227.0" width="1.9" height="15" fill="#b2b233" rx="2" ry="2"/>
<text x="1173.6" y="238.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>thread_start (188 samples, 1.49%)</title><rect x="1172.5" y="227.0" width="17.5" height="15" fill="#ea6464" rx="2" ry="2"/>
<text x="1175.5" y="238.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_pthread_start (188 samples, 1.49%)</title><rect x="1172.5" y="211.0" width="17.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1175.5" y="222.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>_pthread_body (188 samples, 1.49%)</title><rect x="1172.5" y="195.0" width="17.5" height="15" fill="#d64747" rx="2" ry="2"/>
<text x="1175.5" y="206.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>thread_native_entry(Thread*) (188 samples, 1.49%)</title><rect x="1172.5" y="179.0" width="17.5" height="15" fill="#e05454" rx="2" ry="2"/>
<text x="1175.5" y="190.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>GangWorker::loop() (145 samples, 1.15%)</title><rect x="1172.9" y="163.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="174.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1ParTask::work(unsigned int) (50 samples, 0.40%)</title><rect x="1173.8" y="147.0" width="4.6" height="15" fill="#c9c93b" rx="2" ry="2"/>
<text x="1176.8" y="158.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1ParEvacuateFollowersClosure::do_void() (47 samples, 0.37%)</title><rect x="1173.8" y="131.0" width="4.3" height="15" fill="#bcbc36" rx="2" ry="2"/>
<text x="1176.8" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (24 samples, 0.19%)</title><rect x="1173.8" y="115.0" width="2.2" height="15" fill="#bebe37" rx="2" ry="2"/>
<text x="1176.8" y="126.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__block_literal_global (24 samples, 0.19%)</title><rect x="1173.8" y="99.0" width="2.2" height="15" fill="#db4e4e" rx="2" ry="2"/>
<text x="1176.8" y="110.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SpinPause (23 samples, 0.18%)</title><rect x="1176.0" y="115.0" width="2.1" height="15" fill="#d13f3f" rx="2" ry="2"/>
<text x="1179.0" y="126.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (32 samples, 0.25%)</title><rect x="1178.4" y="147.0" width="3.0" height="15" fill="#c9c93b" rx="2" ry="2"/>
<text x="1181.4" y="158.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>HeapRegion::clear_cardtable() (20 samples, 0.16%)</title><rect x="1179.5" y="131.0" width="1.9" height="15" fill="#e0e043" rx="2" ry="2"/>
<text x="1182.5" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>CardTable::clear(MemRegion) (13 samples, 0.10%)</title><rect x="1180.1" y="115.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="126.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ParallelSPCleanupTask::work(unsigned int) (11 samples, 0.09%)</title><rect x="1181.5" y="147.0" width="1.0" height="15" fill="#b2b233" rx="2" ry="2"/>
<text x="1184.5" y="158.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (11 samples, 0.09%)</title><rect x="1181.5" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (38 samples, 0.30%)</title><rect x="1182.5" y="147.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="158.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>si_module_static_search.search_vtable (38 samples, 0.30%)</title><rect x="1182.5" y="131.0" width="3.6" height="15" fill="#e45b5b" rx="2" ry="2"/>
<text x="1185.5" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VMThread::run() (34 samples, 0.27%)</title><rect x="1186.5" y="163.0" width="3.2" height="15" fill="#c0c038" rx="2" ry="2"/>
<text x="1189.5" y="174.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VMThread::loop() (34 samples, 0.27%)</title><rect x="1186.5" y="147.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.5" y="158.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>SafepointSynchronize::begin() (17 samples, 0.13%)</title><rect x="1186.8" y="131.0" width="1.6" height="15" fill="#caca3b" rx="2" ry="2"/>
<text x="1189.8" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VMThread::evaluate_operation(VM_Operation*) (13 samples, 0.10%)</title><rect x="1188.4" y="131.0" width="1.2" height="15" fill="#bdbd37" rx="2" ry="2"/>
<text x="1191.4" y="142.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VM_Operation::evaluate() (13 samples, 0.10%)</title><rect x="1188.4" y="115.0" width="1.2" height="15" fill="#b3b333" rx="2" ry="2"/>
<text x="1191.4" y="126.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>VM_G1CollectForAllocation::doit() (13 samples, 0.10%)</title><rect x="1188.4" y="99.0" width="1.2" height="15" fill="#e3e344" rx="2" ry="2"/>
<text x="1191.4" y="110.0"></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (13 samples, 0.10%)</title><rect x="1188.4" y="83.0" width="1.2" height="15" fill="#b3b333" rx="2" ry="2"/>
<text x="1191.4" y="94.0"></text>
</g>
</svg>
